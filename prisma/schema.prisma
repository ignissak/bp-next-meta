// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]

  edits     GlossaryEdit[]
  approvals GlossaryEditApproval[]
  progress  Progress[]
  feedbacks Feedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Glossary {
  id Int @id @default(autoincrement())

  term       String
  definition String @db.Text()

  updatedAt DateTime       @updatedAt
  createdAt DateTime       @default(now())
  edits     GlossaryEdit[]

  @@index([term])
}

model GlossaryEdit {
  id Int @id @default(autoincrement())

  oldDefinition String @db.Text()
  newDefinition String @db.Text()

  glossaryId Int
  glossary   Glossary @relation(fields: [glossaryId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])

  approvals GlossaryEditApproval[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model GlossaryEditApproval {
  id Int @id @default(autoincrement())

  glossaryEditId Int
  glossaryEdit   GlossaryEdit @relation(fields: [glossaryEditId], references: [id])
  userId         String
  user           User         @relation(fields: [userId], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Progress {
  userId String
  user   User   @relation(fields: [userId], references: [id])

  courseId String
  entryId  String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([userId, courseId, entryId])
}

model Feedback {
  id Int @id @default(autoincrement())

  userId    String?
  user      User?   @relation(fields: [userId], references: [id])
  ipAddress String?

  href     String
  feedback String @db.Text()

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}
